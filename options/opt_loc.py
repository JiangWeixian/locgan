import argparse
from .cfg_gans import grah_netD, grah_netL, grah_netC
from .cfg_priorbox import v1

parser = argparse.ArgumentParser()
parser.add_argument('--name', default='loc', help='the name of this model, deside the savepath of .pth .png files')
parser.add_argument('--mode', default='continue', help='train mode: train/pre-train/test/continue')
parser.add_argument('--batch_size', default=1, help='the batch size of training data')
parser.add_argument('--fine_size', default=288, help='the img will be resize as [fine_size, fine_size]')
parser.add_argument('--epochs', default=100, help='total train 200 epochs')
parser.add_argument('--input_dim', default=3, help='the nums of color channels, RGB imgs channels is 3')
parser.add_argument('--cfg_priors', default=v1, help='the config for Priorboxes')
parser.add_argument('--lr', default=2e-4, help='learning rate')
parser.add_argument('--beta_gans', default=0.5, help='the beta in optim')
parser.add_argument('--cuda', default=False, help='support cuda or not')
parser.add_argument('--cc', default=True, help='support tensorboard or not')
parser.add_argument('--which_model_netD', default='fm', help='deside which netD class to build netD')
parser.add_argument('--networkD_config', default=grah_netD['mp'], help='define the grah of netD, the map of config and grah writed in cfg_gans.py')
parser.add_argument('--which_model_netL', default='base', help='deside which netL class to build netD')
parser.add_argument('--networkL_config', default=grah_netL['base'], help='define the grah of netL, the map of config and grah writed in cfg_gans.py')
parser.add_argument('--which_model_netC', default='base', help='deside which netL class to build netD')
parser.add_argument('--networkC_config', default=grah_netC['base'], help='define the grah of netC, the map of config and grah writed in cfg_gans.py')
parser.add_argument('--save_dir', default='checkpoints/', help='the save dir of train-output')
parser.add_argument('--save_epoch_freq', default=100, help='frequency of saving results')
parser.add_argument('--d_network_path', default='/home/eric/Desktop/Project-PY/pro-py27/01GANs/gans-detection2/gans-detection2/checkpoints/loc/epoch4_TRAIN_DETECT_netD.pth', help='For continue train mode, the path of netD weights')
parser.add_argument('--l_network_path', default='/home/eric/Desktop/Project-PY/pro-py27/01GANs/gans-detection2/gans-detection2/checkpoints/loc/epoch4_TRAIN_DETECT_netL.pth', help='For continue train mode, the path of netL weights')
parser.add_argument('--c_network_path', default='/home/eric/Desktop/Project-PY/pro-py27/01GANs/gans-detection2/gans-detection2/checkpoints/loc/epoch4_TRAIN_DETECT_netC.pth', help='For continue train mode, the path of netL weights')
parser.add_argument('--num_classes', default=2, help='class num')
parser.add_argument('--overlap_thresh', default=0.5, help='threshold for priorboxes')
parser.add_argument('--bkg_label', default=0, help='the label for background')
parser.add_argument('--mask_overlap_thresh', default=0.2, help='threshold for mask priorboxes')

Optloc = parser.parse_args()